/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create chat completion (OpenAI-compatible)
         * @description OpenAI-compatible chat completions endpoint with SSE streaming support.
         *
         *     When `stream: true`, returns Server-Sent Events (SSE) with incremental deltas.
         *     Each SSE frame contains a JSON object with a `choices[].delta` field.
         *     Stream terminates with `data: [DONE]`.
         *
         *     Features:
         *     - Automatic keep-alive pings every 15 seconds
         *     - Backpressure handling for slow clients
         *     - Graceful error recovery with proper SSE error frames
         *     - Compatible with OpenAI SDK and other standard clients
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Model ID (e.g., gpt-4o, claude-3-5-sonnet) */
                        model: string;
                        /** @description Array of messages in the conversation */
                        messages: {
                            /** @enum {string} */
                            role?: "system" | "user" | "assistant" | "function";
                            content?: string;
                            /** @description Optional name for function messages */
                            name?: string;
                            function_call?: {
                                name?: string;
                                arguments?: string;
                            };
                        }[];
                        /** @description Sampling temperature (0-2) */
                        temperature?: number;
                        /** @description Nucleus sampling parameter */
                        top_p?: number;
                        /** @description Maximum tokens to generate */
                        max_tokens?: number;
                        /** @description Enable SSE streaming for real-time responses */
                        stream?: boolean;
                        /** @description Stop sequences */
                        stop?: string | string[];
                        presence_penalty?: number;
                        frequency_penalty?: number;
                        /** @description Optional user identifier for tracking */
                        user?: string;
                        /** @description Specific agent ID to use (optional) */
                        agent_id?: string;
                        /** @description Thread ID for conversation continuity (optional) */
                        thread_id?: string;
                    };
                };
            };
            responses: {
                /** @description Success response. Format depends on `stream` parameter:
                 *     - `stream: false` - Returns complete JSON response
                 *     - `stream: true` - Returns SSE stream with chunked responses
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Unique completion ID */
                            id?: string;
                            /** @enum {string} */
                            object?: "chat.completion";
                            /** @description Unix timestamp */
                            created?: number;
                            model?: string;
                            choices?: {
                                index?: number;
                                message?: {
                                    /** @enum {string} */
                                    role?: "assistant";
                                    content?: string;
                                };
                                /** @enum {string} */
                                finish_reason?: "stop" | "length" | "function_call" | "content_filter";
                            }[];
                            usage?: {
                                prompt_tokens?: number;
                                completion_tokens?: number;
                                total_tokens?: number;
                            };
                        };
                        "text/event-stream": string;
                    };
                };
                /** @description Bad request - Invalid parameters or malformed JSON */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized - Invalid or missing API key */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Rate limit exceeded */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available models (OpenAI-compatible)
         * @description Returns a list of available AI models in OpenAI-compatible format.
         *     Used by OpenAI SDK clients for model discovery.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of available models */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            object?: "list";
                            data?: {
                                /** @description Model identifier */
                                id: string;
                                /** @enum {string} */
                                object: "model";
                                /** @description Unix timestamp of model creation */
                                created: number;
                                /** @description Organization that owns the model */
                                owned_by: string;
                                /** @description Permissions array (typically empty for public models) */
                                permission?: Record<string, never>[];
                                /** @description Root model name */
                                root?: string;
                                /** @description Parent model if applicable */
                                parent?: string | null;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create text completion (OpenAI-compatible) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        model: string;
                        prompt: string | string[];
                        max_tokens?: number;
                        temperature?: number;
                        top_p?: number;
                        stream?: boolean;
                    };
                };
            };
            responses: {
                /** @description Not implemented (use chat/completions) */
                501: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create embeddings (OpenAI-compatible) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        model: string;
                        input: string | string[];
                        dimensions?: number;
                    };
                };
            };
            responses: {
                /** @description Not implemented */
                501: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate API key */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        api_key: string;
                    };
                };
            };
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            valid?: boolean;
                            organization_id?: string | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        refresh_token: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            access_token?: string;
                            expires_in?: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate a session token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        session_token: string;
                    };
                };
            };
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            valid?: boolean;
                            user_id?: string | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List threads */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create thread */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        /** @enum {string} */
                        type?: "chat" | "api" | "multi";
                        system_prompt?: string;
                        model?: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Get thread */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Thread"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get messages */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                    since?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            messages?: components["schemas"]["Message"][];
                            total?: number;
                            hasMore?: boolean;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Send message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        content: string;
                        metadata?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{id}/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stream thread response (SSE) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description SSE stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description RFC 7807 Problem Details for HTTP APIs */
        ProblemDetails: {
            /** @description URI reference that identifies the problem type */
            type: string;
            /** @description Short human-readable summary of the problem */
            title: string;
            /** @description HTTP status code */
            status: number;
            /** @description Human-readable explanation specific to this occurrence */
            detail?: string;
            /** @description URI reference that identifies the specific occurrence */
            instance?: string;
        } & {
            [key: string]: unknown;
        };
        Thread: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** @enum {string} */
            state?: "building" | "testing" | "deployed" | "disabled" | "archived";
            system_prompt?: string;
            model?: string;
            /** Format: date-time */
            created_at?: string;
        };
        Message: {
            /** Format: uuid */
            id?: string;
            /** @enum {string} */
            role?: "user" | "assistant" | "system";
            content?: string;
            /** Format: date-time */
            timestamp?: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
